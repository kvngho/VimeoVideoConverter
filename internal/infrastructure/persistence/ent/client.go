// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/kvngho/vimeovideoconverter/internal/infrastructure/persistence/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"github.com/kvngho/vimeovideoconverter/internal/infrastructure/persistence/ent/deepingtalk"
	"github.com/kvngho/vimeovideoconverter/internal/infrastructure/persistence/ent/productreview"
	"github.com/kvngho/vimeovideoconverter/internal/infrastructure/persistence/ent/productvideo"
	"github.com/kvngho/vimeovideoconverter/internal/infrastructure/persistence/ent/uservideo"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// DeepingTalk is the client for interacting with the DeepingTalk builders.
	DeepingTalk *DeepingTalkClient
	// ProductReview is the client for interacting with the ProductReview builders.
	ProductReview *ProductReviewClient
	// ProductVideo is the client for interacting with the ProductVideo builders.
	ProductVideo *ProductVideoClient
	// UserVideo is the client for interacting with the UserVideo builders.
	UserVideo *UserVideoClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.DeepingTalk = NewDeepingTalkClient(c.config)
	c.ProductReview = NewProductReviewClient(c.config)
	c.ProductVideo = NewProductVideoClient(c.config)
	c.UserVideo = NewUserVideoClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		DeepingTalk:   NewDeepingTalkClient(cfg),
		ProductReview: NewProductReviewClient(cfg),
		ProductVideo:  NewProductVideoClient(cfg),
		UserVideo:     NewUserVideoClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		DeepingTalk:   NewDeepingTalkClient(cfg),
		ProductReview: NewProductReviewClient(cfg),
		ProductVideo:  NewProductVideoClient(cfg),
		UserVideo:     NewUserVideoClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		DeepingTalk.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.DeepingTalk.Use(hooks...)
	c.ProductReview.Use(hooks...)
	c.ProductVideo.Use(hooks...)
	c.UserVideo.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.DeepingTalk.Intercept(interceptors...)
	c.ProductReview.Intercept(interceptors...)
	c.ProductVideo.Intercept(interceptors...)
	c.UserVideo.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *DeepingTalkMutation:
		return c.DeepingTalk.mutate(ctx, m)
	case *ProductReviewMutation:
		return c.ProductReview.mutate(ctx, m)
	case *ProductVideoMutation:
		return c.ProductVideo.mutate(ctx, m)
	case *UserVideoMutation:
		return c.UserVideo.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// DeepingTalkClient is a client for the DeepingTalk schema.
type DeepingTalkClient struct {
	config
}

// NewDeepingTalkClient returns a client for the DeepingTalk from the given config.
func NewDeepingTalkClient(c config) *DeepingTalkClient {
	return &DeepingTalkClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deepingtalk.Hooks(f(g(h())))`.
func (c *DeepingTalkClient) Use(hooks ...Hook) {
	c.hooks.DeepingTalk = append(c.hooks.DeepingTalk, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `deepingtalk.Intercept(f(g(h())))`.
func (c *DeepingTalkClient) Intercept(interceptors ...Interceptor) {
	c.inters.DeepingTalk = append(c.inters.DeepingTalk, interceptors...)
}

// Create returns a builder for creating a DeepingTalk entity.
func (c *DeepingTalkClient) Create() *DeepingTalkCreate {
	mutation := newDeepingTalkMutation(c.config, OpCreate)
	return &DeepingTalkCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DeepingTalk entities.
func (c *DeepingTalkClient) CreateBulk(builders ...*DeepingTalkCreate) *DeepingTalkCreateBulk {
	return &DeepingTalkCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DeepingTalkClient) MapCreateBulk(slice any, setFunc func(*DeepingTalkCreate, int)) *DeepingTalkCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DeepingTalkCreateBulk{err: fmt.Errorf("calling to DeepingTalkClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DeepingTalkCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DeepingTalkCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DeepingTalk.
func (c *DeepingTalkClient) Update() *DeepingTalkUpdate {
	mutation := newDeepingTalkMutation(c.config, OpUpdate)
	return &DeepingTalkUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeepingTalkClient) UpdateOne(dt *DeepingTalk) *DeepingTalkUpdateOne {
	mutation := newDeepingTalkMutation(c.config, OpUpdateOne, withDeepingTalk(dt))
	return &DeepingTalkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeepingTalkClient) UpdateOneID(id int) *DeepingTalkUpdateOne {
	mutation := newDeepingTalkMutation(c.config, OpUpdateOne, withDeepingTalkID(id))
	return &DeepingTalkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DeepingTalk.
func (c *DeepingTalkClient) Delete() *DeepingTalkDelete {
	mutation := newDeepingTalkMutation(c.config, OpDelete)
	return &DeepingTalkDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DeepingTalkClient) DeleteOne(dt *DeepingTalk) *DeepingTalkDeleteOne {
	return c.DeleteOneID(dt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DeepingTalkClient) DeleteOneID(id int) *DeepingTalkDeleteOne {
	builder := c.Delete().Where(deepingtalk.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeepingTalkDeleteOne{builder}
}

// Query returns a query builder for DeepingTalk.
func (c *DeepingTalkClient) Query() *DeepingTalkQuery {
	return &DeepingTalkQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDeepingTalk},
		inters: c.Interceptors(),
	}
}

// Get returns a DeepingTalk entity by its id.
func (c *DeepingTalkClient) Get(ctx context.Context, id int) (*DeepingTalk, error) {
	return c.Query().Where(deepingtalk.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeepingTalkClient) GetX(ctx context.Context, id int) *DeepingTalk {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DeepingTalkClient) Hooks() []Hook {
	return c.hooks.DeepingTalk
}

// Interceptors returns the client interceptors.
func (c *DeepingTalkClient) Interceptors() []Interceptor {
	return c.inters.DeepingTalk
}

func (c *DeepingTalkClient) mutate(ctx context.Context, m *DeepingTalkMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DeepingTalkCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DeepingTalkUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DeepingTalkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DeepingTalkDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DeepingTalk mutation op: %q", m.Op())
	}
}

// ProductReviewClient is a client for the ProductReview schema.
type ProductReviewClient struct {
	config
}

// NewProductReviewClient returns a client for the ProductReview from the given config.
func NewProductReviewClient(c config) *ProductReviewClient {
	return &ProductReviewClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productreview.Hooks(f(g(h())))`.
func (c *ProductReviewClient) Use(hooks ...Hook) {
	c.hooks.ProductReview = append(c.hooks.ProductReview, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `productreview.Intercept(f(g(h())))`.
func (c *ProductReviewClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProductReview = append(c.inters.ProductReview, interceptors...)
}

// Create returns a builder for creating a ProductReview entity.
func (c *ProductReviewClient) Create() *ProductReviewCreate {
	mutation := newProductReviewMutation(c.config, OpCreate)
	return &ProductReviewCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductReview entities.
func (c *ProductReviewClient) CreateBulk(builders ...*ProductReviewCreate) *ProductReviewCreateBulk {
	return &ProductReviewCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProductReviewClient) MapCreateBulk(slice any, setFunc func(*ProductReviewCreate, int)) *ProductReviewCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProductReviewCreateBulk{err: fmt.Errorf("calling to ProductReviewClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProductReviewCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProductReviewCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductReview.
func (c *ProductReviewClient) Update() *ProductReviewUpdate {
	mutation := newProductReviewMutation(c.config, OpUpdate)
	return &ProductReviewUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductReviewClient) UpdateOne(pr *ProductReview) *ProductReviewUpdateOne {
	mutation := newProductReviewMutation(c.config, OpUpdateOne, withProductReview(pr))
	return &ProductReviewUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductReviewClient) UpdateOneID(id int) *ProductReviewUpdateOne {
	mutation := newProductReviewMutation(c.config, OpUpdateOne, withProductReviewID(id))
	return &ProductReviewUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductReview.
func (c *ProductReviewClient) Delete() *ProductReviewDelete {
	mutation := newProductReviewMutation(c.config, OpDelete)
	return &ProductReviewDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProductReviewClient) DeleteOne(pr *ProductReview) *ProductReviewDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProductReviewClient) DeleteOneID(id int) *ProductReviewDeleteOne {
	builder := c.Delete().Where(productreview.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductReviewDeleteOne{builder}
}

// Query returns a query builder for ProductReview.
func (c *ProductReviewClient) Query() *ProductReviewQuery {
	return &ProductReviewQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProductReview},
		inters: c.Interceptors(),
	}
}

// Get returns a ProductReview entity by its id.
func (c *ProductReviewClient) Get(ctx context.Context, id int) (*ProductReview, error) {
	return c.Query().Where(productreview.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductReviewClient) GetX(ctx context.Context, id int) *ProductReview {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProductReviewClient) Hooks() []Hook {
	return c.hooks.ProductReview
}

// Interceptors returns the client interceptors.
func (c *ProductReviewClient) Interceptors() []Interceptor {
	return c.inters.ProductReview
}

func (c *ProductReviewClient) mutate(ctx context.Context, m *ProductReviewMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProductReviewCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProductReviewUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProductReviewUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProductReviewDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProductReview mutation op: %q", m.Op())
	}
}

// ProductVideoClient is a client for the ProductVideo schema.
type ProductVideoClient struct {
	config
}

// NewProductVideoClient returns a client for the ProductVideo from the given config.
func NewProductVideoClient(c config) *ProductVideoClient {
	return &ProductVideoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productvideo.Hooks(f(g(h())))`.
func (c *ProductVideoClient) Use(hooks ...Hook) {
	c.hooks.ProductVideo = append(c.hooks.ProductVideo, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `productvideo.Intercept(f(g(h())))`.
func (c *ProductVideoClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProductVideo = append(c.inters.ProductVideo, interceptors...)
}

// Create returns a builder for creating a ProductVideo entity.
func (c *ProductVideoClient) Create() *ProductVideoCreate {
	mutation := newProductVideoMutation(c.config, OpCreate)
	return &ProductVideoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductVideo entities.
func (c *ProductVideoClient) CreateBulk(builders ...*ProductVideoCreate) *ProductVideoCreateBulk {
	return &ProductVideoCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProductVideoClient) MapCreateBulk(slice any, setFunc func(*ProductVideoCreate, int)) *ProductVideoCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProductVideoCreateBulk{err: fmt.Errorf("calling to ProductVideoClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProductVideoCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProductVideoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductVideo.
func (c *ProductVideoClient) Update() *ProductVideoUpdate {
	mutation := newProductVideoMutation(c.config, OpUpdate)
	return &ProductVideoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductVideoClient) UpdateOne(pv *ProductVideo) *ProductVideoUpdateOne {
	mutation := newProductVideoMutation(c.config, OpUpdateOne, withProductVideo(pv))
	return &ProductVideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductVideoClient) UpdateOneID(id int) *ProductVideoUpdateOne {
	mutation := newProductVideoMutation(c.config, OpUpdateOne, withProductVideoID(id))
	return &ProductVideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductVideo.
func (c *ProductVideoClient) Delete() *ProductVideoDelete {
	mutation := newProductVideoMutation(c.config, OpDelete)
	return &ProductVideoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProductVideoClient) DeleteOne(pv *ProductVideo) *ProductVideoDeleteOne {
	return c.DeleteOneID(pv.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProductVideoClient) DeleteOneID(id int) *ProductVideoDeleteOne {
	builder := c.Delete().Where(productvideo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductVideoDeleteOne{builder}
}

// Query returns a query builder for ProductVideo.
func (c *ProductVideoClient) Query() *ProductVideoQuery {
	return &ProductVideoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProductVideo},
		inters: c.Interceptors(),
	}
}

// Get returns a ProductVideo entity by its id.
func (c *ProductVideoClient) Get(ctx context.Context, id int) (*ProductVideo, error) {
	return c.Query().Where(productvideo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductVideoClient) GetX(ctx context.Context, id int) *ProductVideo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProductVideoClient) Hooks() []Hook {
	return c.hooks.ProductVideo
}

// Interceptors returns the client interceptors.
func (c *ProductVideoClient) Interceptors() []Interceptor {
	return c.inters.ProductVideo
}

func (c *ProductVideoClient) mutate(ctx context.Context, m *ProductVideoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProductVideoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProductVideoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProductVideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProductVideoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProductVideo mutation op: %q", m.Op())
	}
}

// UserVideoClient is a client for the UserVideo schema.
type UserVideoClient struct {
	config
}

// NewUserVideoClient returns a client for the UserVideo from the given config.
func NewUserVideoClient(c config) *UserVideoClient {
	return &UserVideoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `uservideo.Hooks(f(g(h())))`.
func (c *UserVideoClient) Use(hooks ...Hook) {
	c.hooks.UserVideo = append(c.hooks.UserVideo, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `uservideo.Intercept(f(g(h())))`.
func (c *UserVideoClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserVideo = append(c.inters.UserVideo, interceptors...)
}

// Create returns a builder for creating a UserVideo entity.
func (c *UserVideoClient) Create() *UserVideoCreate {
	mutation := newUserVideoMutation(c.config, OpCreate)
	return &UserVideoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserVideo entities.
func (c *UserVideoClient) CreateBulk(builders ...*UserVideoCreate) *UserVideoCreateBulk {
	return &UserVideoCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserVideoClient) MapCreateBulk(slice any, setFunc func(*UserVideoCreate, int)) *UserVideoCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserVideoCreateBulk{err: fmt.Errorf("calling to UserVideoClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserVideoCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserVideoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserVideo.
func (c *UserVideoClient) Update() *UserVideoUpdate {
	mutation := newUserVideoMutation(c.config, OpUpdate)
	return &UserVideoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserVideoClient) UpdateOne(uv *UserVideo) *UserVideoUpdateOne {
	mutation := newUserVideoMutation(c.config, OpUpdateOne, withUserVideo(uv))
	return &UserVideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserVideoClient) UpdateOneID(id int) *UserVideoUpdateOne {
	mutation := newUserVideoMutation(c.config, OpUpdateOne, withUserVideoID(id))
	return &UserVideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserVideo.
func (c *UserVideoClient) Delete() *UserVideoDelete {
	mutation := newUserVideoMutation(c.config, OpDelete)
	return &UserVideoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserVideoClient) DeleteOne(uv *UserVideo) *UserVideoDeleteOne {
	return c.DeleteOneID(uv.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserVideoClient) DeleteOneID(id int) *UserVideoDeleteOne {
	builder := c.Delete().Where(uservideo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserVideoDeleteOne{builder}
}

// Query returns a query builder for UserVideo.
func (c *UserVideoClient) Query() *UserVideoQuery {
	return &UserVideoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserVideo},
		inters: c.Interceptors(),
	}
}

// Get returns a UserVideo entity by its id.
func (c *UserVideoClient) Get(ctx context.Context, id int) (*UserVideo, error) {
	return c.Query().Where(uservideo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserVideoClient) GetX(ctx context.Context, id int) *UserVideo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserVideoClient) Hooks() []Hook {
	return c.hooks.UserVideo
}

// Interceptors returns the client interceptors.
func (c *UserVideoClient) Interceptors() []Interceptor {
	return c.inters.UserVideo
}

func (c *UserVideoClient) mutate(ctx context.Context, m *UserVideoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserVideoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserVideoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserVideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserVideoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserVideo mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		DeepingTalk, ProductReview, ProductVideo, UserVideo []ent.Hook
	}
	inters struct {
		DeepingTalk, ProductReview, ProductVideo, UserVideo []ent.Interceptor
	}
)
