// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kvngho/vimeovideoconverter/internal/infrastructure/persistence/ent/predicate"
	"github.com/kvngho/vimeovideoconverter/internal/infrastructure/persistence/ent/productreview"
)

// ProductReviewUpdate is the builder for updating ProductReview entities.
type ProductReviewUpdate struct {
	config
	hooks    []Hook
	mutation *ProductReviewMutation
}

// Where appends a list predicates to the ProductReviewUpdate builder.
func (pru *ProductReviewUpdate) Where(ps ...predicate.ProductReview) *ProductReviewUpdate {
	pru.mutation.Where(ps...)
	return pru
}

// SetPlayableVideo sets the "playable_video" field.
func (pru *ProductReviewUpdate) SetPlayableVideo(s string) *ProductReviewUpdate {
	pru.mutation.SetPlayableVideo(s)
	return pru
}

// SetNillablePlayableVideo sets the "playable_video" field if the given value is not nil.
func (pru *ProductReviewUpdate) SetNillablePlayableVideo(s *string) *ProductReviewUpdate {
	if s != nil {
		pru.SetPlayableVideo(*s)
	}
	return pru
}

// SetReviewVideo sets the "review_video" field.
func (pru *ProductReviewUpdate) SetReviewVideo(s string) *ProductReviewUpdate {
	pru.mutation.SetReviewVideo(s)
	return pru
}

// SetNillableReviewVideo sets the "review_video" field if the given value is not nil.
func (pru *ProductReviewUpdate) SetNillableReviewVideo(s *string) *ProductReviewUpdate {
	if s != nil {
		pru.SetReviewVideo(*s)
	}
	return pru
}

// Mutation returns the ProductReviewMutation object of the builder.
func (pru *ProductReviewUpdate) Mutation() *ProductReviewMutation {
	return pru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pru *ProductReviewUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pru.sqlSave, pru.mutation, pru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pru *ProductReviewUpdate) SaveX(ctx context.Context) int {
	affected, err := pru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pru *ProductReviewUpdate) Exec(ctx context.Context) error {
	_, err := pru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pru *ProductReviewUpdate) ExecX(ctx context.Context) {
	if err := pru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pru *ProductReviewUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(productreview.Table, productreview.Columns, sqlgraph.NewFieldSpec(productreview.FieldID, field.TypeInt))
	if ps := pru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pru.mutation.PlayableVideo(); ok {
		_spec.SetField(productreview.FieldPlayableVideo, field.TypeString, value)
	}
	if value, ok := pru.mutation.ReviewVideo(); ok {
		_spec.SetField(productreview.FieldReviewVideo, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productreview.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pru.mutation.done = true
	return n, nil
}

// ProductReviewUpdateOne is the builder for updating a single ProductReview entity.
type ProductReviewUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductReviewMutation
}

// SetPlayableVideo sets the "playable_video" field.
func (pruo *ProductReviewUpdateOne) SetPlayableVideo(s string) *ProductReviewUpdateOne {
	pruo.mutation.SetPlayableVideo(s)
	return pruo
}

// SetNillablePlayableVideo sets the "playable_video" field if the given value is not nil.
func (pruo *ProductReviewUpdateOne) SetNillablePlayableVideo(s *string) *ProductReviewUpdateOne {
	if s != nil {
		pruo.SetPlayableVideo(*s)
	}
	return pruo
}

// SetReviewVideo sets the "review_video" field.
func (pruo *ProductReviewUpdateOne) SetReviewVideo(s string) *ProductReviewUpdateOne {
	pruo.mutation.SetReviewVideo(s)
	return pruo
}

// SetNillableReviewVideo sets the "review_video" field if the given value is not nil.
func (pruo *ProductReviewUpdateOne) SetNillableReviewVideo(s *string) *ProductReviewUpdateOne {
	if s != nil {
		pruo.SetReviewVideo(*s)
	}
	return pruo
}

// Mutation returns the ProductReviewMutation object of the builder.
func (pruo *ProductReviewUpdateOne) Mutation() *ProductReviewMutation {
	return pruo.mutation
}

// Where appends a list predicates to the ProductReviewUpdate builder.
func (pruo *ProductReviewUpdateOne) Where(ps ...predicate.ProductReview) *ProductReviewUpdateOne {
	pruo.mutation.Where(ps...)
	return pruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pruo *ProductReviewUpdateOne) Select(field string, fields ...string) *ProductReviewUpdateOne {
	pruo.fields = append([]string{field}, fields...)
	return pruo
}

// Save executes the query and returns the updated ProductReview entity.
func (pruo *ProductReviewUpdateOne) Save(ctx context.Context) (*ProductReview, error) {
	return withHooks(ctx, pruo.sqlSave, pruo.mutation, pruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pruo *ProductReviewUpdateOne) SaveX(ctx context.Context) *ProductReview {
	node, err := pruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pruo *ProductReviewUpdateOne) Exec(ctx context.Context) error {
	_, err := pruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pruo *ProductReviewUpdateOne) ExecX(ctx context.Context) {
	if err := pruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pruo *ProductReviewUpdateOne) sqlSave(ctx context.Context) (_node *ProductReview, err error) {
	_spec := sqlgraph.NewUpdateSpec(productreview.Table, productreview.Columns, sqlgraph.NewFieldSpec(productreview.FieldID, field.TypeInt))
	id, ok := pruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProductReview.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productreview.FieldID)
		for _, f := range fields {
			if !productreview.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productreview.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pruo.mutation.PlayableVideo(); ok {
		_spec.SetField(productreview.FieldPlayableVideo, field.TypeString, value)
	}
	if value, ok := pruo.mutation.ReviewVideo(); ok {
		_spec.SetField(productreview.FieldReviewVideo, field.TypeString, value)
	}
	_node = &ProductReview{config: pruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productreview.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pruo.mutation.done = true
	return _node, nil
}
