// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kvngho/vimeovideoconverter/internal/infrastructure/persistence/ent/uservideo"
)

// UserVideoCreate is the builder for creating a UserVideo entity.
type UserVideoCreate struct {
	config
	mutation *UserVideoMutation
	hooks    []Hook
}

// SetVideoID sets the "video_id" field.
func (uvc *UserVideoCreate) SetVideoID(i int) *UserVideoCreate {
	uvc.mutation.SetVideoID(i)
	return uvc
}

// SetVideoURL sets the "video_url" field.
func (uvc *UserVideoCreate) SetVideoURL(s string) *UserVideoCreate {
	uvc.mutation.SetVideoURL(s)
	return uvc
}

// SetPlayableVideo sets the "playable_video" field.
func (uvc *UserVideoCreate) SetPlayableVideo(s string) *UserVideoCreate {
	uvc.mutation.SetPlayableVideo(s)
	return uvc
}

// Mutation returns the UserVideoMutation object of the builder.
func (uvc *UserVideoCreate) Mutation() *UserVideoMutation {
	return uvc.mutation
}

// Save creates the UserVideo in the database.
func (uvc *UserVideoCreate) Save(ctx context.Context) (*UserVideo, error) {
	return withHooks(ctx, uvc.sqlSave, uvc.mutation, uvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uvc *UserVideoCreate) SaveX(ctx context.Context) *UserVideo {
	v, err := uvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uvc *UserVideoCreate) Exec(ctx context.Context) error {
	_, err := uvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uvc *UserVideoCreate) ExecX(ctx context.Context) {
	if err := uvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uvc *UserVideoCreate) check() error {
	if _, ok := uvc.mutation.VideoID(); !ok {
		return &ValidationError{Name: "video_id", err: errors.New(`ent: missing required field "UserVideo.video_id"`)}
	}
	if v, ok := uvc.mutation.VideoID(); ok {
		if err := uservideo.VideoIDValidator(v); err != nil {
			return &ValidationError{Name: "video_id", err: fmt.Errorf(`ent: validator failed for field "UserVideo.video_id": %w`, err)}
		}
	}
	if _, ok := uvc.mutation.VideoURL(); !ok {
		return &ValidationError{Name: "video_url", err: errors.New(`ent: missing required field "UserVideo.video_url"`)}
	}
	if _, ok := uvc.mutation.PlayableVideo(); !ok {
		return &ValidationError{Name: "playable_video", err: errors.New(`ent: missing required field "UserVideo.playable_video"`)}
	}
	return nil
}

func (uvc *UserVideoCreate) sqlSave(ctx context.Context) (*UserVideo, error) {
	if err := uvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	uvc.mutation.id = &_node.ID
	uvc.mutation.done = true
	return _node, nil
}

func (uvc *UserVideoCreate) createSpec() (*UserVideo, *sqlgraph.CreateSpec) {
	var (
		_node = &UserVideo{config: uvc.config}
		_spec = sqlgraph.NewCreateSpec(uservideo.Table, sqlgraph.NewFieldSpec(uservideo.FieldID, field.TypeInt))
	)
	if value, ok := uvc.mutation.VideoID(); ok {
		_spec.SetField(uservideo.FieldVideoID, field.TypeInt, value)
		_node.VideoID = value
	}
	if value, ok := uvc.mutation.VideoURL(); ok {
		_spec.SetField(uservideo.FieldVideoURL, field.TypeString, value)
		_node.VideoURL = value
	}
	if value, ok := uvc.mutation.PlayableVideo(); ok {
		_spec.SetField(uservideo.FieldPlayableVideo, field.TypeString, value)
		_node.PlayableVideo = value
	}
	return _node, _spec
}

// UserVideoCreateBulk is the builder for creating many UserVideo entities in bulk.
type UserVideoCreateBulk struct {
	config
	err      error
	builders []*UserVideoCreate
}

// Save creates the UserVideo entities in the database.
func (uvcb *UserVideoCreateBulk) Save(ctx context.Context) ([]*UserVideo, error) {
	if uvcb.err != nil {
		return nil, uvcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uvcb.builders))
	nodes := make([]*UserVideo, len(uvcb.builders))
	mutators := make([]Mutator, len(uvcb.builders))
	for i := range uvcb.builders {
		func(i int, root context.Context) {
			builder := uvcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserVideoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uvcb *UserVideoCreateBulk) SaveX(ctx context.Context) []*UserVideo {
	v, err := uvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uvcb *UserVideoCreateBulk) Exec(ctx context.Context) error {
	_, err := uvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uvcb *UserVideoCreateBulk) ExecX(ctx context.Context) {
	if err := uvcb.Exec(ctx); err != nil {
		panic(err)
	}
}
