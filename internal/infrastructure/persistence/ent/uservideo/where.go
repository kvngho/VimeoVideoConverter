// Code generated by ent, DO NOT EDIT.

package uservideo

import (
	"entgo.io/ent/dialect/sql"
	"github.com/kvngho/vimeovideoconverter/internal/infrastructure/persistence/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldLTE(FieldID, id))
}

// VideoID applies equality check predicate on the "video_id" field. It's identical to VideoIDEQ.
func VideoID(v int) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldEQ(FieldVideoID, v))
}

// VideoURL applies equality check predicate on the "video_url" field. It's identical to VideoURLEQ.
func VideoURL(v string) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldEQ(FieldVideoURL, v))
}

// PlayableVideo applies equality check predicate on the "playable_video" field. It's identical to PlayableVideoEQ.
func PlayableVideo(v string) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldEQ(FieldPlayableVideo, v))
}

// VideoIDEQ applies the EQ predicate on the "video_id" field.
func VideoIDEQ(v int) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldEQ(FieldVideoID, v))
}

// VideoIDNEQ applies the NEQ predicate on the "video_id" field.
func VideoIDNEQ(v int) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldNEQ(FieldVideoID, v))
}

// VideoIDIn applies the In predicate on the "video_id" field.
func VideoIDIn(vs ...int) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldIn(FieldVideoID, vs...))
}

// VideoIDNotIn applies the NotIn predicate on the "video_id" field.
func VideoIDNotIn(vs ...int) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldNotIn(FieldVideoID, vs...))
}

// VideoIDGT applies the GT predicate on the "video_id" field.
func VideoIDGT(v int) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldGT(FieldVideoID, v))
}

// VideoIDGTE applies the GTE predicate on the "video_id" field.
func VideoIDGTE(v int) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldGTE(FieldVideoID, v))
}

// VideoIDLT applies the LT predicate on the "video_id" field.
func VideoIDLT(v int) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldLT(FieldVideoID, v))
}

// VideoIDLTE applies the LTE predicate on the "video_id" field.
func VideoIDLTE(v int) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldLTE(FieldVideoID, v))
}

// VideoURLEQ applies the EQ predicate on the "video_url" field.
func VideoURLEQ(v string) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldEQ(FieldVideoURL, v))
}

// VideoURLNEQ applies the NEQ predicate on the "video_url" field.
func VideoURLNEQ(v string) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldNEQ(FieldVideoURL, v))
}

// VideoURLIn applies the In predicate on the "video_url" field.
func VideoURLIn(vs ...string) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldIn(FieldVideoURL, vs...))
}

// VideoURLNotIn applies the NotIn predicate on the "video_url" field.
func VideoURLNotIn(vs ...string) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldNotIn(FieldVideoURL, vs...))
}

// VideoURLGT applies the GT predicate on the "video_url" field.
func VideoURLGT(v string) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldGT(FieldVideoURL, v))
}

// VideoURLGTE applies the GTE predicate on the "video_url" field.
func VideoURLGTE(v string) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldGTE(FieldVideoURL, v))
}

// VideoURLLT applies the LT predicate on the "video_url" field.
func VideoURLLT(v string) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldLT(FieldVideoURL, v))
}

// VideoURLLTE applies the LTE predicate on the "video_url" field.
func VideoURLLTE(v string) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldLTE(FieldVideoURL, v))
}

// VideoURLContains applies the Contains predicate on the "video_url" field.
func VideoURLContains(v string) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldContains(FieldVideoURL, v))
}

// VideoURLHasPrefix applies the HasPrefix predicate on the "video_url" field.
func VideoURLHasPrefix(v string) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldHasPrefix(FieldVideoURL, v))
}

// VideoURLHasSuffix applies the HasSuffix predicate on the "video_url" field.
func VideoURLHasSuffix(v string) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldHasSuffix(FieldVideoURL, v))
}

// VideoURLEqualFold applies the EqualFold predicate on the "video_url" field.
func VideoURLEqualFold(v string) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldEqualFold(FieldVideoURL, v))
}

// VideoURLContainsFold applies the ContainsFold predicate on the "video_url" field.
func VideoURLContainsFold(v string) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldContainsFold(FieldVideoURL, v))
}

// PlayableVideoEQ applies the EQ predicate on the "playable_video" field.
func PlayableVideoEQ(v string) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldEQ(FieldPlayableVideo, v))
}

// PlayableVideoNEQ applies the NEQ predicate on the "playable_video" field.
func PlayableVideoNEQ(v string) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldNEQ(FieldPlayableVideo, v))
}

// PlayableVideoIn applies the In predicate on the "playable_video" field.
func PlayableVideoIn(vs ...string) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldIn(FieldPlayableVideo, vs...))
}

// PlayableVideoNotIn applies the NotIn predicate on the "playable_video" field.
func PlayableVideoNotIn(vs ...string) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldNotIn(FieldPlayableVideo, vs...))
}

// PlayableVideoGT applies the GT predicate on the "playable_video" field.
func PlayableVideoGT(v string) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldGT(FieldPlayableVideo, v))
}

// PlayableVideoGTE applies the GTE predicate on the "playable_video" field.
func PlayableVideoGTE(v string) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldGTE(FieldPlayableVideo, v))
}

// PlayableVideoLT applies the LT predicate on the "playable_video" field.
func PlayableVideoLT(v string) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldLT(FieldPlayableVideo, v))
}

// PlayableVideoLTE applies the LTE predicate on the "playable_video" field.
func PlayableVideoLTE(v string) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldLTE(FieldPlayableVideo, v))
}

// PlayableVideoContains applies the Contains predicate on the "playable_video" field.
func PlayableVideoContains(v string) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldContains(FieldPlayableVideo, v))
}

// PlayableVideoHasPrefix applies the HasPrefix predicate on the "playable_video" field.
func PlayableVideoHasPrefix(v string) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldHasPrefix(FieldPlayableVideo, v))
}

// PlayableVideoHasSuffix applies the HasSuffix predicate on the "playable_video" field.
func PlayableVideoHasSuffix(v string) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldHasSuffix(FieldPlayableVideo, v))
}

// PlayableVideoEqualFold applies the EqualFold predicate on the "playable_video" field.
func PlayableVideoEqualFold(v string) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldEqualFold(FieldPlayableVideo, v))
}

// PlayableVideoContainsFold applies the ContainsFold predicate on the "playable_video" field.
func PlayableVideoContainsFold(v string) predicate.UserVideo {
	return predicate.UserVideo(sql.FieldContainsFold(FieldPlayableVideo, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserVideo) predicate.UserVideo {
	return predicate.UserVideo(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserVideo) predicate.UserVideo {
	return predicate.UserVideo(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserVideo) predicate.UserVideo {
	return predicate.UserVideo(sql.NotPredicates(p))
}
