// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/kvngho/vimeovideoconverter/internal/infrastructure/persistence/ent/uservideo"
)

// UserVideo is the model entity for the UserVideo schema.
type UserVideo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// VideoID holds the value of the "video_id" field.
	VideoID int `json:"video_id,omitempty"`
	// VideoURL holds the value of the "video_url" field.
	VideoURL string `json:"video_url,omitempty"`
	// PlayableVideo holds the value of the "playable_video" field.
	PlayableVideo string `json:"playable_video,omitempty"`
	selectValues  sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserVideo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case uservideo.FieldID, uservideo.FieldVideoID:
			values[i] = new(sql.NullInt64)
		case uservideo.FieldVideoURL, uservideo.FieldPlayableVideo:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserVideo fields.
func (uv *UserVideo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case uservideo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uv.ID = int(value.Int64)
		case uservideo.FieldVideoID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field video_id", values[i])
			} else if value.Valid {
				uv.VideoID = int(value.Int64)
			}
		case uservideo.FieldVideoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field video_url", values[i])
			} else if value.Valid {
				uv.VideoURL = value.String
			}
		case uservideo.FieldPlayableVideo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field playable_video", values[i])
			} else if value.Valid {
				uv.PlayableVideo = value.String
			}
		default:
			uv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserVideo.
// This includes values selected through modifiers, order, etc.
func (uv *UserVideo) Value(name string) (ent.Value, error) {
	return uv.selectValues.Get(name)
}

// Update returns a builder for updating this UserVideo.
// Note that you need to call UserVideo.Unwrap() before calling this method if this UserVideo
// was returned from a transaction, and the transaction was committed or rolled back.
func (uv *UserVideo) Update() *UserVideoUpdateOne {
	return NewUserVideoClient(uv.config).UpdateOne(uv)
}

// Unwrap unwraps the UserVideo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uv *UserVideo) Unwrap() *UserVideo {
	_tx, ok := uv.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserVideo is not a transactional entity")
	}
	uv.config.driver = _tx.drv
	return uv
}

// String implements the fmt.Stringer.
func (uv *UserVideo) String() string {
	var builder strings.Builder
	builder.WriteString("UserVideo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uv.ID))
	builder.WriteString("video_id=")
	builder.WriteString(fmt.Sprintf("%v", uv.VideoID))
	builder.WriteString(", ")
	builder.WriteString("video_url=")
	builder.WriteString(uv.VideoURL)
	builder.WriteString(", ")
	builder.WriteString("playable_video=")
	builder.WriteString(uv.PlayableVideo)
	builder.WriteByte(')')
	return builder.String()
}

// UserVideos is a parsable slice of UserVideo.
type UserVideos []*UserVideo
