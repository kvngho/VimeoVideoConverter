// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/kvngho/vimeovideoconverter/internal/infrastructure/persistence/ent/productvideo"
)

// ProductVideo is the model entity for the ProductVideo schema.
type ProductVideo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// PlayableVideo holds the value of the "playable_video" field.
	PlayableVideo string `json:"playable_video,omitempty"`
	selectValues  sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductVideo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case productvideo.FieldID:
			values[i] = new(sql.NullInt64)
		case productvideo.FieldURL, productvideo.FieldPlayableVideo:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductVideo fields.
func (pv *ProductVideo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productvideo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pv.ID = int(value.Int64)
		case productvideo.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				pv.URL = value.String
			}
		case productvideo.FieldPlayableVideo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field playable_video", values[i])
			} else if value.Valid {
				pv.PlayableVideo = value.String
			}
		default:
			pv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProductVideo.
// This includes values selected through modifiers, order, etc.
func (pv *ProductVideo) Value(name string) (ent.Value, error) {
	return pv.selectValues.Get(name)
}

// Update returns a builder for updating this ProductVideo.
// Note that you need to call ProductVideo.Unwrap() before calling this method if this ProductVideo
// was returned from a transaction, and the transaction was committed or rolled back.
func (pv *ProductVideo) Update() *ProductVideoUpdateOne {
	return NewProductVideoClient(pv.config).UpdateOne(pv)
}

// Unwrap unwraps the ProductVideo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pv *ProductVideo) Unwrap() *ProductVideo {
	_tx, ok := pv.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductVideo is not a transactional entity")
	}
	pv.config.driver = _tx.drv
	return pv
}

// String implements the fmt.Stringer.
func (pv *ProductVideo) String() string {
	var builder strings.Builder
	builder.WriteString("ProductVideo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pv.ID))
	builder.WriteString("url=")
	builder.WriteString(pv.URL)
	builder.WriteString(", ")
	builder.WriteString("playable_video=")
	builder.WriteString(pv.PlayableVideo)
	builder.WriteByte(')')
	return builder.String()
}

// ProductVideos is a parsable slice of ProductVideo.
type ProductVideos []*ProductVideo
