// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kvngho/vimeovideoconverter/internal/infrastructure/persistence/ent/predicate"
	"github.com/kvngho/vimeovideoconverter/internal/infrastructure/persistence/ent/productvideo"
)

// ProductVideoUpdate is the builder for updating ProductVideo entities.
type ProductVideoUpdate struct {
	config
	hooks    []Hook
	mutation *ProductVideoMutation
}

// Where appends a list predicates to the ProductVideoUpdate builder.
func (pvu *ProductVideoUpdate) Where(ps ...predicate.ProductVideo) *ProductVideoUpdate {
	pvu.mutation.Where(ps...)
	return pvu
}

// SetURL sets the "url" field.
func (pvu *ProductVideoUpdate) SetURL(s string) *ProductVideoUpdate {
	pvu.mutation.SetURL(s)
	return pvu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (pvu *ProductVideoUpdate) SetNillableURL(s *string) *ProductVideoUpdate {
	if s != nil {
		pvu.SetURL(*s)
	}
	return pvu
}

// SetPlayableVideo sets the "playable_video" field.
func (pvu *ProductVideoUpdate) SetPlayableVideo(s string) *ProductVideoUpdate {
	pvu.mutation.SetPlayableVideo(s)
	return pvu
}

// SetNillablePlayableVideo sets the "playable_video" field if the given value is not nil.
func (pvu *ProductVideoUpdate) SetNillablePlayableVideo(s *string) *ProductVideoUpdate {
	if s != nil {
		pvu.SetPlayableVideo(*s)
	}
	return pvu
}

// Mutation returns the ProductVideoMutation object of the builder.
func (pvu *ProductVideoUpdate) Mutation() *ProductVideoMutation {
	return pvu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pvu *ProductVideoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pvu.sqlSave, pvu.mutation, pvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pvu *ProductVideoUpdate) SaveX(ctx context.Context) int {
	affected, err := pvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pvu *ProductVideoUpdate) Exec(ctx context.Context) error {
	_, err := pvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvu *ProductVideoUpdate) ExecX(ctx context.Context) {
	if err := pvu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pvu *ProductVideoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(productvideo.Table, productvideo.Columns, sqlgraph.NewFieldSpec(productvideo.FieldID, field.TypeInt))
	if ps := pvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pvu.mutation.URL(); ok {
		_spec.SetField(productvideo.FieldURL, field.TypeString, value)
	}
	if value, ok := pvu.mutation.PlayableVideo(); ok {
		_spec.SetField(productvideo.FieldPlayableVideo, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productvideo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pvu.mutation.done = true
	return n, nil
}

// ProductVideoUpdateOne is the builder for updating a single ProductVideo entity.
type ProductVideoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductVideoMutation
}

// SetURL sets the "url" field.
func (pvuo *ProductVideoUpdateOne) SetURL(s string) *ProductVideoUpdateOne {
	pvuo.mutation.SetURL(s)
	return pvuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (pvuo *ProductVideoUpdateOne) SetNillableURL(s *string) *ProductVideoUpdateOne {
	if s != nil {
		pvuo.SetURL(*s)
	}
	return pvuo
}

// SetPlayableVideo sets the "playable_video" field.
func (pvuo *ProductVideoUpdateOne) SetPlayableVideo(s string) *ProductVideoUpdateOne {
	pvuo.mutation.SetPlayableVideo(s)
	return pvuo
}

// SetNillablePlayableVideo sets the "playable_video" field if the given value is not nil.
func (pvuo *ProductVideoUpdateOne) SetNillablePlayableVideo(s *string) *ProductVideoUpdateOne {
	if s != nil {
		pvuo.SetPlayableVideo(*s)
	}
	return pvuo
}

// Mutation returns the ProductVideoMutation object of the builder.
func (pvuo *ProductVideoUpdateOne) Mutation() *ProductVideoMutation {
	return pvuo.mutation
}

// Where appends a list predicates to the ProductVideoUpdate builder.
func (pvuo *ProductVideoUpdateOne) Where(ps ...predicate.ProductVideo) *ProductVideoUpdateOne {
	pvuo.mutation.Where(ps...)
	return pvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pvuo *ProductVideoUpdateOne) Select(field string, fields ...string) *ProductVideoUpdateOne {
	pvuo.fields = append([]string{field}, fields...)
	return pvuo
}

// Save executes the query and returns the updated ProductVideo entity.
func (pvuo *ProductVideoUpdateOne) Save(ctx context.Context) (*ProductVideo, error) {
	return withHooks(ctx, pvuo.sqlSave, pvuo.mutation, pvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pvuo *ProductVideoUpdateOne) SaveX(ctx context.Context) *ProductVideo {
	node, err := pvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pvuo *ProductVideoUpdateOne) Exec(ctx context.Context) error {
	_, err := pvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvuo *ProductVideoUpdateOne) ExecX(ctx context.Context) {
	if err := pvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pvuo *ProductVideoUpdateOne) sqlSave(ctx context.Context) (_node *ProductVideo, err error) {
	_spec := sqlgraph.NewUpdateSpec(productvideo.Table, productvideo.Columns, sqlgraph.NewFieldSpec(productvideo.FieldID, field.TypeInt))
	id, ok := pvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProductVideo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productvideo.FieldID)
		for _, f := range fields {
			if !productvideo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productvideo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pvuo.mutation.URL(); ok {
		_spec.SetField(productvideo.FieldURL, field.TypeString, value)
	}
	if value, ok := pvuo.mutation.PlayableVideo(); ok {
		_spec.SetField(productvideo.FieldPlayableVideo, field.TypeString, value)
	}
	_node = &ProductVideo{config: pvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productvideo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pvuo.mutation.done = true
	return _node, nil
}
