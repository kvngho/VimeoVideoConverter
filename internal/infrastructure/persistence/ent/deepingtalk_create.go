// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kvngho/vimeovideoconverter/internal/infrastructure/persistence/ent/deepingtalk"
)

// DeepingTalkCreate is the builder for creating a DeepingTalk entity.
type DeepingTalkCreate struct {
	config
	mutation *DeepingTalkMutation
	hooks    []Hook
}

// SetTalkVideo sets the "talk_video" field.
func (dtc *DeepingTalkCreate) SetTalkVideo(s string) *DeepingTalkCreate {
	dtc.mutation.SetTalkVideo(s)
	return dtc
}

// SetPlayableVideo sets the "playable_video" field.
func (dtc *DeepingTalkCreate) SetPlayableVideo(s string) *DeepingTalkCreate {
	dtc.mutation.SetPlayableVideo(s)
	return dtc
}

// Mutation returns the DeepingTalkMutation object of the builder.
func (dtc *DeepingTalkCreate) Mutation() *DeepingTalkMutation {
	return dtc.mutation
}

// Save creates the DeepingTalk in the database.
func (dtc *DeepingTalkCreate) Save(ctx context.Context) (*DeepingTalk, error) {
	return withHooks(ctx, dtc.sqlSave, dtc.mutation, dtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dtc *DeepingTalkCreate) SaveX(ctx context.Context) *DeepingTalk {
	v, err := dtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dtc *DeepingTalkCreate) Exec(ctx context.Context) error {
	_, err := dtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtc *DeepingTalkCreate) ExecX(ctx context.Context) {
	if err := dtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dtc *DeepingTalkCreate) check() error {
	if _, ok := dtc.mutation.TalkVideo(); !ok {
		return &ValidationError{Name: "talk_video", err: errors.New(`ent: missing required field "DeepingTalk.talk_video"`)}
	}
	if _, ok := dtc.mutation.PlayableVideo(); !ok {
		return &ValidationError{Name: "playable_video", err: errors.New(`ent: missing required field "DeepingTalk.playable_video"`)}
	}
	return nil
}

func (dtc *DeepingTalkCreate) sqlSave(ctx context.Context) (*DeepingTalk, error) {
	if err := dtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	dtc.mutation.id = &_node.ID
	dtc.mutation.done = true
	return _node, nil
}

func (dtc *DeepingTalkCreate) createSpec() (*DeepingTalk, *sqlgraph.CreateSpec) {
	var (
		_node = &DeepingTalk{config: dtc.config}
		_spec = sqlgraph.NewCreateSpec(deepingtalk.Table, sqlgraph.NewFieldSpec(deepingtalk.FieldID, field.TypeInt))
	)
	if value, ok := dtc.mutation.TalkVideo(); ok {
		_spec.SetField(deepingtalk.FieldTalkVideo, field.TypeString, value)
		_node.TalkVideo = value
	}
	if value, ok := dtc.mutation.PlayableVideo(); ok {
		_spec.SetField(deepingtalk.FieldPlayableVideo, field.TypeString, value)
		_node.PlayableVideo = value
	}
	return _node, _spec
}

// DeepingTalkCreateBulk is the builder for creating many DeepingTalk entities in bulk.
type DeepingTalkCreateBulk struct {
	config
	err      error
	builders []*DeepingTalkCreate
}

// Save creates the DeepingTalk entities in the database.
func (dtcb *DeepingTalkCreateBulk) Save(ctx context.Context) ([]*DeepingTalk, error) {
	if dtcb.err != nil {
		return nil, dtcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dtcb.builders))
	nodes := make([]*DeepingTalk, len(dtcb.builders))
	mutators := make([]Mutator, len(dtcb.builders))
	for i := range dtcb.builders {
		func(i int, root context.Context) {
			builder := dtcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeepingTalkMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dtcb *DeepingTalkCreateBulk) SaveX(ctx context.Context) []*DeepingTalk {
	v, err := dtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dtcb *DeepingTalkCreateBulk) Exec(ctx context.Context) error {
	_, err := dtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtcb *DeepingTalkCreateBulk) ExecX(ctx context.Context) {
	if err := dtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
