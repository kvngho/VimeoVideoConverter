// Code generated by ent, DO NOT EDIT.

package deepingtalk

import (
	"entgo.io/ent/dialect/sql"
	"github.com/kvngho/vimeovideoconverter/internal/infrastructure/persistence/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.DeepingTalk {
	return predicate.DeepingTalk(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.DeepingTalk {
	return predicate.DeepingTalk(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.DeepingTalk {
	return predicate.DeepingTalk(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.DeepingTalk {
	return predicate.DeepingTalk(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.DeepingTalk {
	return predicate.DeepingTalk(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.DeepingTalk {
	return predicate.DeepingTalk(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.DeepingTalk {
	return predicate.DeepingTalk(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.DeepingTalk {
	return predicate.DeepingTalk(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.DeepingTalk {
	return predicate.DeepingTalk(sql.FieldLTE(FieldID, id))
}

// TalkVideo applies equality check predicate on the "talk_video" field. It's identical to TalkVideoEQ.
func TalkVideo(v string) predicate.DeepingTalk {
	return predicate.DeepingTalk(sql.FieldEQ(FieldTalkVideo, v))
}

// PlayableVideo applies equality check predicate on the "playable_video" field. It's identical to PlayableVideoEQ.
func PlayableVideo(v string) predicate.DeepingTalk {
	return predicate.DeepingTalk(sql.FieldEQ(FieldPlayableVideo, v))
}

// TalkVideoEQ applies the EQ predicate on the "talk_video" field.
func TalkVideoEQ(v string) predicate.DeepingTalk {
	return predicate.DeepingTalk(sql.FieldEQ(FieldTalkVideo, v))
}

// TalkVideoNEQ applies the NEQ predicate on the "talk_video" field.
func TalkVideoNEQ(v string) predicate.DeepingTalk {
	return predicate.DeepingTalk(sql.FieldNEQ(FieldTalkVideo, v))
}

// TalkVideoIn applies the In predicate on the "talk_video" field.
func TalkVideoIn(vs ...string) predicate.DeepingTalk {
	return predicate.DeepingTalk(sql.FieldIn(FieldTalkVideo, vs...))
}

// TalkVideoNotIn applies the NotIn predicate on the "talk_video" field.
func TalkVideoNotIn(vs ...string) predicate.DeepingTalk {
	return predicate.DeepingTalk(sql.FieldNotIn(FieldTalkVideo, vs...))
}

// TalkVideoGT applies the GT predicate on the "talk_video" field.
func TalkVideoGT(v string) predicate.DeepingTalk {
	return predicate.DeepingTalk(sql.FieldGT(FieldTalkVideo, v))
}

// TalkVideoGTE applies the GTE predicate on the "talk_video" field.
func TalkVideoGTE(v string) predicate.DeepingTalk {
	return predicate.DeepingTalk(sql.FieldGTE(FieldTalkVideo, v))
}

// TalkVideoLT applies the LT predicate on the "talk_video" field.
func TalkVideoLT(v string) predicate.DeepingTalk {
	return predicate.DeepingTalk(sql.FieldLT(FieldTalkVideo, v))
}

// TalkVideoLTE applies the LTE predicate on the "talk_video" field.
func TalkVideoLTE(v string) predicate.DeepingTalk {
	return predicate.DeepingTalk(sql.FieldLTE(FieldTalkVideo, v))
}

// TalkVideoContains applies the Contains predicate on the "talk_video" field.
func TalkVideoContains(v string) predicate.DeepingTalk {
	return predicate.DeepingTalk(sql.FieldContains(FieldTalkVideo, v))
}

// TalkVideoHasPrefix applies the HasPrefix predicate on the "talk_video" field.
func TalkVideoHasPrefix(v string) predicate.DeepingTalk {
	return predicate.DeepingTalk(sql.FieldHasPrefix(FieldTalkVideo, v))
}

// TalkVideoHasSuffix applies the HasSuffix predicate on the "talk_video" field.
func TalkVideoHasSuffix(v string) predicate.DeepingTalk {
	return predicate.DeepingTalk(sql.FieldHasSuffix(FieldTalkVideo, v))
}

// TalkVideoEqualFold applies the EqualFold predicate on the "talk_video" field.
func TalkVideoEqualFold(v string) predicate.DeepingTalk {
	return predicate.DeepingTalk(sql.FieldEqualFold(FieldTalkVideo, v))
}

// TalkVideoContainsFold applies the ContainsFold predicate on the "talk_video" field.
func TalkVideoContainsFold(v string) predicate.DeepingTalk {
	return predicate.DeepingTalk(sql.FieldContainsFold(FieldTalkVideo, v))
}

// PlayableVideoEQ applies the EQ predicate on the "playable_video" field.
func PlayableVideoEQ(v string) predicate.DeepingTalk {
	return predicate.DeepingTalk(sql.FieldEQ(FieldPlayableVideo, v))
}

// PlayableVideoNEQ applies the NEQ predicate on the "playable_video" field.
func PlayableVideoNEQ(v string) predicate.DeepingTalk {
	return predicate.DeepingTalk(sql.FieldNEQ(FieldPlayableVideo, v))
}

// PlayableVideoIn applies the In predicate on the "playable_video" field.
func PlayableVideoIn(vs ...string) predicate.DeepingTalk {
	return predicate.DeepingTalk(sql.FieldIn(FieldPlayableVideo, vs...))
}

// PlayableVideoNotIn applies the NotIn predicate on the "playable_video" field.
func PlayableVideoNotIn(vs ...string) predicate.DeepingTalk {
	return predicate.DeepingTalk(sql.FieldNotIn(FieldPlayableVideo, vs...))
}

// PlayableVideoGT applies the GT predicate on the "playable_video" field.
func PlayableVideoGT(v string) predicate.DeepingTalk {
	return predicate.DeepingTalk(sql.FieldGT(FieldPlayableVideo, v))
}

// PlayableVideoGTE applies the GTE predicate on the "playable_video" field.
func PlayableVideoGTE(v string) predicate.DeepingTalk {
	return predicate.DeepingTalk(sql.FieldGTE(FieldPlayableVideo, v))
}

// PlayableVideoLT applies the LT predicate on the "playable_video" field.
func PlayableVideoLT(v string) predicate.DeepingTalk {
	return predicate.DeepingTalk(sql.FieldLT(FieldPlayableVideo, v))
}

// PlayableVideoLTE applies the LTE predicate on the "playable_video" field.
func PlayableVideoLTE(v string) predicate.DeepingTalk {
	return predicate.DeepingTalk(sql.FieldLTE(FieldPlayableVideo, v))
}

// PlayableVideoContains applies the Contains predicate on the "playable_video" field.
func PlayableVideoContains(v string) predicate.DeepingTalk {
	return predicate.DeepingTalk(sql.FieldContains(FieldPlayableVideo, v))
}

// PlayableVideoHasPrefix applies the HasPrefix predicate on the "playable_video" field.
func PlayableVideoHasPrefix(v string) predicate.DeepingTalk {
	return predicate.DeepingTalk(sql.FieldHasPrefix(FieldPlayableVideo, v))
}

// PlayableVideoHasSuffix applies the HasSuffix predicate on the "playable_video" field.
func PlayableVideoHasSuffix(v string) predicate.DeepingTalk {
	return predicate.DeepingTalk(sql.FieldHasSuffix(FieldPlayableVideo, v))
}

// PlayableVideoEqualFold applies the EqualFold predicate on the "playable_video" field.
func PlayableVideoEqualFold(v string) predicate.DeepingTalk {
	return predicate.DeepingTalk(sql.FieldEqualFold(FieldPlayableVideo, v))
}

// PlayableVideoContainsFold applies the ContainsFold predicate on the "playable_video" field.
func PlayableVideoContainsFold(v string) predicate.DeepingTalk {
	return predicate.DeepingTalk(sql.FieldContainsFold(FieldPlayableVideo, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DeepingTalk) predicate.DeepingTalk {
	return predicate.DeepingTalk(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DeepingTalk) predicate.DeepingTalk {
	return predicate.DeepingTalk(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DeepingTalk) predicate.DeepingTalk {
	return predicate.DeepingTalk(sql.NotPredicates(p))
}
