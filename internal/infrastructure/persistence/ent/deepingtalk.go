// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/kvngho/vimeovideoconverter/internal/infrastructure/persistence/ent/deepingtalk"
)

// DeepingTalk is the model entity for the DeepingTalk schema.
type DeepingTalk struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TalkVideo holds the value of the "talk_video" field.
	TalkVideo string `json:"talk_video,omitempty"`
	// PlayableVideo holds the value of the "playable_video" field.
	PlayableVideo string `json:"playable_video,omitempty"`
	selectValues  sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DeepingTalk) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case deepingtalk.FieldID:
			values[i] = new(sql.NullInt64)
		case deepingtalk.FieldTalkVideo, deepingtalk.FieldPlayableVideo:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DeepingTalk fields.
func (dt *DeepingTalk) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case deepingtalk.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dt.ID = int(value.Int64)
		case deepingtalk.FieldTalkVideo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field talk_video", values[i])
			} else if value.Valid {
				dt.TalkVideo = value.String
			}
		case deepingtalk.FieldPlayableVideo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field playable_video", values[i])
			} else if value.Valid {
				dt.PlayableVideo = value.String
			}
		default:
			dt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DeepingTalk.
// This includes values selected through modifiers, order, etc.
func (dt *DeepingTalk) Value(name string) (ent.Value, error) {
	return dt.selectValues.Get(name)
}

// Update returns a builder for updating this DeepingTalk.
// Note that you need to call DeepingTalk.Unwrap() before calling this method if this DeepingTalk
// was returned from a transaction, and the transaction was committed or rolled back.
func (dt *DeepingTalk) Update() *DeepingTalkUpdateOne {
	return NewDeepingTalkClient(dt.config).UpdateOne(dt)
}

// Unwrap unwraps the DeepingTalk entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dt *DeepingTalk) Unwrap() *DeepingTalk {
	_tx, ok := dt.config.driver.(*txDriver)
	if !ok {
		panic("ent: DeepingTalk is not a transactional entity")
	}
	dt.config.driver = _tx.drv
	return dt
}

// String implements the fmt.Stringer.
func (dt *DeepingTalk) String() string {
	var builder strings.Builder
	builder.WriteString("DeepingTalk(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dt.ID))
	builder.WriteString("talk_video=")
	builder.WriteString(dt.TalkVideo)
	builder.WriteString(", ")
	builder.WriteString("playable_video=")
	builder.WriteString(dt.PlayableVideo)
	builder.WriteByte(')')
	return builder.String()
}

// DeepingTalks is a parsable slice of DeepingTalk.
type DeepingTalks []*DeepingTalk
