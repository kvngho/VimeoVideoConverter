// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kvngho/vimeovideoconverter/internal/infrastructure/persistence/ent/deepingtalk"
	"github.com/kvngho/vimeovideoconverter/internal/infrastructure/persistence/ent/predicate"
)

// DeepingTalkUpdate is the builder for updating DeepingTalk entities.
type DeepingTalkUpdate struct {
	config
	hooks    []Hook
	mutation *DeepingTalkMutation
}

// Where appends a list predicates to the DeepingTalkUpdate builder.
func (dtu *DeepingTalkUpdate) Where(ps ...predicate.DeepingTalk) *DeepingTalkUpdate {
	dtu.mutation.Where(ps...)
	return dtu
}

// SetTalkVideo sets the "talk_video" field.
func (dtu *DeepingTalkUpdate) SetTalkVideo(s string) *DeepingTalkUpdate {
	dtu.mutation.SetTalkVideo(s)
	return dtu
}

// SetNillableTalkVideo sets the "talk_video" field if the given value is not nil.
func (dtu *DeepingTalkUpdate) SetNillableTalkVideo(s *string) *DeepingTalkUpdate {
	if s != nil {
		dtu.SetTalkVideo(*s)
	}
	return dtu
}

// SetPlayableVideo sets the "playable_video" field.
func (dtu *DeepingTalkUpdate) SetPlayableVideo(s string) *DeepingTalkUpdate {
	dtu.mutation.SetPlayableVideo(s)
	return dtu
}

// SetNillablePlayableVideo sets the "playable_video" field if the given value is not nil.
func (dtu *DeepingTalkUpdate) SetNillablePlayableVideo(s *string) *DeepingTalkUpdate {
	if s != nil {
		dtu.SetPlayableVideo(*s)
	}
	return dtu
}

// Mutation returns the DeepingTalkMutation object of the builder.
func (dtu *DeepingTalkUpdate) Mutation() *DeepingTalkMutation {
	return dtu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dtu *DeepingTalkUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dtu.sqlSave, dtu.mutation, dtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dtu *DeepingTalkUpdate) SaveX(ctx context.Context) int {
	affected, err := dtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dtu *DeepingTalkUpdate) Exec(ctx context.Context) error {
	_, err := dtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtu *DeepingTalkUpdate) ExecX(ctx context.Context) {
	if err := dtu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dtu *DeepingTalkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(deepingtalk.Table, deepingtalk.Columns, sqlgraph.NewFieldSpec(deepingtalk.FieldID, field.TypeInt))
	if ps := dtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dtu.mutation.TalkVideo(); ok {
		_spec.SetField(deepingtalk.FieldTalkVideo, field.TypeString, value)
	}
	if value, ok := dtu.mutation.PlayableVideo(); ok {
		_spec.SetField(deepingtalk.FieldPlayableVideo, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deepingtalk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dtu.mutation.done = true
	return n, nil
}

// DeepingTalkUpdateOne is the builder for updating a single DeepingTalk entity.
type DeepingTalkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeepingTalkMutation
}

// SetTalkVideo sets the "talk_video" field.
func (dtuo *DeepingTalkUpdateOne) SetTalkVideo(s string) *DeepingTalkUpdateOne {
	dtuo.mutation.SetTalkVideo(s)
	return dtuo
}

// SetNillableTalkVideo sets the "talk_video" field if the given value is not nil.
func (dtuo *DeepingTalkUpdateOne) SetNillableTalkVideo(s *string) *DeepingTalkUpdateOne {
	if s != nil {
		dtuo.SetTalkVideo(*s)
	}
	return dtuo
}

// SetPlayableVideo sets the "playable_video" field.
func (dtuo *DeepingTalkUpdateOne) SetPlayableVideo(s string) *DeepingTalkUpdateOne {
	dtuo.mutation.SetPlayableVideo(s)
	return dtuo
}

// SetNillablePlayableVideo sets the "playable_video" field if the given value is not nil.
func (dtuo *DeepingTalkUpdateOne) SetNillablePlayableVideo(s *string) *DeepingTalkUpdateOne {
	if s != nil {
		dtuo.SetPlayableVideo(*s)
	}
	return dtuo
}

// Mutation returns the DeepingTalkMutation object of the builder.
func (dtuo *DeepingTalkUpdateOne) Mutation() *DeepingTalkMutation {
	return dtuo.mutation
}

// Where appends a list predicates to the DeepingTalkUpdate builder.
func (dtuo *DeepingTalkUpdateOne) Where(ps ...predicate.DeepingTalk) *DeepingTalkUpdateOne {
	dtuo.mutation.Where(ps...)
	return dtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dtuo *DeepingTalkUpdateOne) Select(field string, fields ...string) *DeepingTalkUpdateOne {
	dtuo.fields = append([]string{field}, fields...)
	return dtuo
}

// Save executes the query and returns the updated DeepingTalk entity.
func (dtuo *DeepingTalkUpdateOne) Save(ctx context.Context) (*DeepingTalk, error) {
	return withHooks(ctx, dtuo.sqlSave, dtuo.mutation, dtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dtuo *DeepingTalkUpdateOne) SaveX(ctx context.Context) *DeepingTalk {
	node, err := dtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dtuo *DeepingTalkUpdateOne) Exec(ctx context.Context) error {
	_, err := dtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtuo *DeepingTalkUpdateOne) ExecX(ctx context.Context) {
	if err := dtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dtuo *DeepingTalkUpdateOne) sqlSave(ctx context.Context) (_node *DeepingTalk, err error) {
	_spec := sqlgraph.NewUpdateSpec(deepingtalk.Table, deepingtalk.Columns, sqlgraph.NewFieldSpec(deepingtalk.FieldID, field.TypeInt))
	id, ok := dtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DeepingTalk.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deepingtalk.FieldID)
		for _, f := range fields {
			if !deepingtalk.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deepingtalk.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dtuo.mutation.TalkVideo(); ok {
		_spec.SetField(deepingtalk.FieldTalkVideo, field.TypeString, value)
	}
	if value, ok := dtuo.mutation.PlayableVideo(); ok {
		_spec.SetField(deepingtalk.FieldPlayableVideo, field.TypeString, value)
	}
	_node = &DeepingTalk{config: dtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deepingtalk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dtuo.mutation.done = true
	return _node, nil
}
